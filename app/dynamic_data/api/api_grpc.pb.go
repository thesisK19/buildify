// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/dynamic_data/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DynamicDataServiceClient is the client API for DynamicDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicDataServiceClient interface {
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	GetListDocument(ctx context.Context, in *GetListDocumentRequest, opts ...grpc.CallOption) (*GetListDocumentResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	GetListCollections(ctx context.Context, in *GetListCollectionsRequest, opts ...grpc.CallOption) (*GetListCollectionsResponse, error)
	GetCollectionMapping(ctx context.Context, in *GetCollectionMappingRequest, opts ...grpc.CallOption) (*GetCollectionMappingResponse, error)
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetDatabaseScript(ctx context.Context, in *GetDatabaseScriptRequest, opts ...grpc.CallOption) (*GetDatabaseScriptResponse, error)
	HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type dynamicDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicDataServiceClient(cc grpc.ClientConnInterface) DynamicDataServiceClient {
	return &dynamicDataServiceClient{cc}
}

func (c *dynamicDataServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error) {
	out := new(CreateDocumentResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetListDocument(ctx context.Context, in *GetListDocumentRequest, opts ...grpc.CallOption) (*GetListDocumentResponse, error) {
	out := new(GetListDocumentResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetListDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetListCollections(ctx context.Context, in *GetListCollectionsRequest, opts ...grpc.CallOption) (*GetListCollectionsResponse, error) {
	out := new(GetListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetCollectionMapping(ctx context.Context, in *GetCollectionMappingRequest, opts ...grpc.CallOption) (*GetCollectionMappingResponse, error) {
	out := new(GetCollectionMappingResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetCollectionMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) GetDatabaseScript(ctx context.Context, in *GetDatabaseScriptRequest, opts ...grpc.CallOption) (*GetDatabaseScriptResponse, error) {
	out := new(GetDatabaseScriptResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/GetDatabaseScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicDataServiceClient) HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/buildify.app.dynamic_data.api.DynamicDataService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicDataServiceServer is the server API for DynamicDataService service.
// All implementations should embed UnimplementedDynamicDataServiceServer
// for forward compatibility
type DynamicDataServiceServer interface {
	CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	GetListDocument(context.Context, *GetListDocumentRequest) (*GetListDocumentResponse, error)
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*EmptyResponse, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*EmptyResponse, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	GetListCollections(context.Context, *GetListCollectionsRequest) (*GetListCollectionsResponse, error)
	GetCollectionMapping(context.Context, *GetCollectionMappingRequest) (*GetCollectionMappingResponse, error)
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*EmptyResponse, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*EmptyResponse, error)
	GetDatabaseScript(context.Context, *GetDatabaseScriptRequest) (*GetDatabaseScriptResponse, error)
	HealthCheck(context.Context, *EmptyRequest) (*EmptyResponse, error)
}

// UnimplementedDynamicDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDynamicDataServiceServer struct {
}

func (UnimplementedDynamicDataServiceServer) CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetListDocument(context.Context, *GetListDocumentRequest) (*GetListDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDocument not implemented")
}
func (UnimplementedDynamicDataServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDynamicDataServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDynamicDataServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetListCollections(context.Context, *GetListCollectionsRequest) (*GetListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCollections not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetCollectionMapping(context.Context, *GetCollectionMappingRequest) (*GetCollectionMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionMapping not implemented")
}
func (UnimplementedDynamicDataServiceServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedDynamicDataServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedDynamicDataServiceServer) GetDatabaseScript(context.Context, *GetDatabaseScriptRequest) (*GetDatabaseScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseScript not implemented")
}
func (UnimplementedDynamicDataServiceServer) HealthCheck(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

// UnsafeDynamicDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicDataServiceServer will
// result in compilation errors.
type UnsafeDynamicDataServiceServer interface {
	mustEmbedUnimplementedDynamicDataServiceServer()
}

func RegisterDynamicDataServiceServer(s grpc.ServiceRegistrar, srv DynamicDataServiceServer) {
	s.RegisterService(&DynamicDataService_ServiceDesc, srv)
}

func _DynamicDataService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetListDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetListDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetListDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetListDocument(ctx, req.(*GetListDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/DeleteDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetListCollections(ctx, req.(*GetListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetCollectionMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetCollectionMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetCollectionMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetCollectionMapping(ctx, req.(*GetCollectionMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_GetDatabaseScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).GetDatabaseScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/GetDatabaseScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).GetDatabaseScript(ctx, req.(*GetDatabaseScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicDataService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicDataServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildify.app.dynamic_data.api.DynamicDataService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicDataServiceServer).HealthCheck(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicDataService_ServiceDesc is the grpc.ServiceDesc for DynamicDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buildify.app.dynamic_data.api.DynamicDataService",
	HandlerType: (*DynamicDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _DynamicDataService_CreateDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DynamicDataService_GetDocument_Handler,
		},
		{
			MethodName: "GetListDocument",
			Handler:    _DynamicDataService_GetListDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DynamicDataService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DynamicDataService_DeleteDocument_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _DynamicDataService_CreateCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _DynamicDataService_GetCollection_Handler,
		},
		{
			MethodName: "GetListCollections",
			Handler:    _DynamicDataService_GetListCollections_Handler,
		},
		{
			MethodName: "GetCollectionMapping",
			Handler:    _DynamicDataService_GetCollectionMapping_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _DynamicDataService_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _DynamicDataService_DeleteCollection_Handler,
		},
		{
			MethodName: "GetDatabaseScript",
			Handler:    _DynamicDataService_GetDatabaseScript_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DynamicDataService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/dynamic_data/api/api.proto",
}
