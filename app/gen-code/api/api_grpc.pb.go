// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: app/gen-code/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenCodeServiceClient is the client API for GenCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenCodeServiceClient interface {
	GenReactSourceCode(ctx context.Context, in *GenReactSourceCodeRequest, opts ...grpc.CallOption) (*GenReactSourceCodeResponse, error)
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type genCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenCodeServiceClient(cc grpc.ClientConnInterface) GenCodeServiceClient {
	return &genCodeServiceClient{cc}
}

func (c *genCodeServiceClient) GenReactSourceCode(ctx context.Context, in *GenReactSourceCodeRequest, opts ...grpc.CallOption) (*GenReactSourceCodeResponse, error) {
	out := new(GenReactSourceCodeResponse)
	err := c.cc.Invoke(ctx, "/app.gen_code.api.GenCodeService/GenReactSourceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genCodeServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/app.gen_code.api.GenCodeService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genCodeServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/app.gen_code.api.GenCodeService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenCodeServiceServer is the server API for GenCodeService service.
// All implementations should embed UnimplementedGenCodeServiceServer
// for forward compatibility
type GenCodeServiceServer interface {
	GenReactSourceCode(context.Context, *GenReactSourceCodeRequest) (*GenReactSourceCodeResponse, error)
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedGenCodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGenCodeServiceServer struct {
}

func (UnimplementedGenCodeServiceServer) GenReactSourceCode(context.Context, *GenReactSourceCodeRequest) (*GenReactSourceCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenReactSourceCode not implemented")
}
func (UnimplementedGenCodeServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedGenCodeServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

// UnsafeGenCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenCodeServiceServer will
// result in compilation errors.
type UnsafeGenCodeServiceServer interface {
	mustEmbedUnimplementedGenCodeServiceServer()
}

func RegisterGenCodeServiceServer(s grpc.ServiceRegistrar, srv GenCodeServiceServer) {
	s.RegisterService(&GenCodeService_ServiceDesc, srv)
}

func _GenCodeService_GenReactSourceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenReactSourceCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenCodeServiceServer).GenReactSourceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gen_code.api.GenCodeService/GenReactSourceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenCodeServiceServer).GenReactSourceCode(ctx, req.(*GenReactSourceCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenCodeService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenCodeServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gen_code.api.GenCodeService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenCodeServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenCodeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenCodeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gen_code.api.GenCodeService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenCodeServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenCodeService_ServiceDesc is the grpc.ServiceDesc for GenCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.gen_code.api.GenCodeService",
	HandlerType: (*GenCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenReactSourceCode",
			Handler:    _GenCodeService_GenReactSourceCode_Handler,
		},
		{
			MethodName: "HelloWorld",
			Handler:    _GenCodeService_HelloWorld_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _GenCodeService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/gen-code/api/api.proto",
}
