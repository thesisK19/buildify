// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/gen_code/api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on EmptyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyResponseMultiError, or
// nil if none found.
func (m *EmptyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyResponseMultiError(errors)
	}

	return nil
}

// EmptyResponseMultiError is an error wrapping multiple validation errors
// returned by EmptyResponse.ValidateAll() if the designated constraints
// aren't met.
type EmptyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyResponseMultiError) AllErrors() []error { return m }

// EmptyResponseValidationError is the validation error returned by
// EmptyResponse.Validate if the designated constraints aren't met.
type EmptyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResponseValidationError) ErrorName() string { return "EmptyResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResponseValidationError{}

// Validate checks the field values on GenReactSourceCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenReactSourceCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenReactSourceCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenReactSourceCodeRequestMultiError, or nil if none found.
func (m *GenReactSourceCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenReactSourceCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenReactSourceCodeRequestValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenReactSourceCodeRequestValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenReactSourceCodeRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenReactSourceCodeRequestValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenReactSourceCodeRequestValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenReactSourceCodeRequestValidationError{
					field:  fmt.Sprintf("Pages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenReactSourceCodeRequestMultiError(errors)
	}

	return nil
}

// GenReactSourceCodeRequestMultiError is an error wrapping multiple validation
// errors returned by GenReactSourceCodeRequest.ValidateAll() if the
// designated constraints aren't met.
type GenReactSourceCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenReactSourceCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenReactSourceCodeRequestMultiError) AllErrors() []error { return m }

// GenReactSourceCodeRequestValidationError is the validation error returned by
// GenReactSourceCodeRequest.Validate if the designated constraints aren't met.
type GenReactSourceCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenReactSourceCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenReactSourceCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenReactSourceCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenReactSourceCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenReactSourceCodeRequestValidationError) ErrorName() string {
	return "GenReactSourceCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenReactSourceCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenReactSourceCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenReactSourceCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenReactSourceCodeRequestValidationError{}

// Validate checks the field values on GenReactSourceCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenReactSourceCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenReactSourceCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenReactSourceCodeResponseMultiError, or nil if none found.
func (m *GenReactSourceCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenReactSourceCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GenReactSourceCodeResponseMultiError(errors)
	}

	return nil
}

// GenReactSourceCodeResponseMultiError is an error wrapping multiple
// validation errors returned by GenReactSourceCodeResponse.ValidateAll() if
// the designated constraints aren't met.
type GenReactSourceCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenReactSourceCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenReactSourceCodeResponseMultiError) AllErrors() []error { return m }

// GenReactSourceCodeResponseValidationError is the validation error returned
// by GenReactSourceCodeResponse.Validate if the designated constraints aren't met.
type GenReactSourceCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenReactSourceCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenReactSourceCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenReactSourceCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenReactSourceCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenReactSourceCodeResponseValidationError) ErrorName() string {
	return "GenReactSourceCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenReactSourceCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenReactSourceCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenReactSourceCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenReactSourceCodeResponseValidationError{}

// Validate checks the field values on HelloWorldResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloWorldResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloWorldResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloWorldResponseMultiError, or nil if none found.
func (m *HelloWorldResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloWorldResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloWorldResponseMultiError(errors)
	}

	return nil
}

// HelloWorldResponseMultiError is an error wrapping multiple validation errors
// returned by HelloWorldResponse.ValidateAll() if the designated constraints
// aren't met.
type HelloWorldResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloWorldResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloWorldResponseMultiError) AllErrors() []error { return m }

// HelloWorldResponseValidationError is the validation error returned by
// HelloWorldResponse.Validate if the designated constraints aren't met.
type HelloWorldResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloWorldResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloWorldResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloWorldResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloWorldResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloWorldResponseValidationError) ErrorName() string {
	return "HelloWorldResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HelloWorldResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloWorldResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloWorldResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloWorldResponseValidationError{}
